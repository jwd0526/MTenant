// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: deal_contacts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addDealContact = `-- name: AddDealContact :one
INSERT INTO deal_contacts (deal_id, contact_id, role)
VALUES ($1, $2, $3)
RETURNING deal_id, contact_id, role, created_at
`

type AddDealContactParams struct {
	DealID    int32   `json:"deal_id"`
	ContactID int32   `json:"contact_id"`
	Role      *string `json:"role"`
}

func (q *Queries) AddDealContact(ctx context.Context, arg AddDealContactParams) (DealContact, error) {
	row := q.db.QueryRow(ctx, addDealContact, arg.DealID, arg.ContactID, arg.Role)
	var i DealContact
	err := row.Scan(
		&i.DealID,
		&i.ContactID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getContactDeals = `-- name: GetContactDeals :many
SELECT d.id, d.title, d.value, d.stage, dc.role
FROM deals d
JOIN deal_contacts dc ON d.id = dc.deal_id
WHERE dc.contact_id = $1
`

type GetContactDealsRow struct {
	ID    int32          `json:"id"`
	Title string         `json:"title"`
	Value pgtype.Numeric `json:"value"`
	Stage string         `json:"stage"`
	Role  *string        `json:"role"`
}

func (q *Queries) GetContactDeals(ctx context.Context, contactID int32) ([]GetContactDealsRow, error) {
	rows, err := q.db.Query(ctx, getContactDeals, contactID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetContactDealsRow{}
	for rows.Next() {
		var i GetContactDealsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Value,
			&i.Stage,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDealContacts = `-- name: GetDealContacts :many
SELECT c.id, c.first_name, c.last_name, c.email, dc.role
FROM contacts c
JOIN deal_contacts dc ON c.id = dc.contact_id
WHERE dc.deal_id = $1
`

type GetDealContactsRow struct {
	ID        int32   `json:"id"`
	FirstName string  `json:"first_name"`
	LastName  string  `json:"last_name"`
	Email     *string `json:"email"`
	Role      *string `json:"role"`
}

func (q *Queries) GetDealContacts(ctx context.Context, dealID int32) ([]GetDealContactsRow, error) {
	rows, err := q.db.Query(ctx, getDealContacts, dealID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDealContactsRow{}
	for rows.Next() {
		var i GetDealContactsRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDealContact = `-- name: RemoveDealContact :exec
DELETE FROM deal_contacts 
WHERE deal_id = $1 AND contact_id = $2
`

type RemoveDealContactParams struct {
	DealID    int32 `json:"deal_id"`
	ContactID int32 `json:"contact_id"`
}

func (q *Queries) RemoveDealContact(ctx context.Context, arg RemoveDealContactParams) error {
	_, err := q.db.Exec(ctx, removeDealContact, arg.DealID, arg.ContactID)
	return err
}
