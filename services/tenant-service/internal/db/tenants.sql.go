// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tenants.sql

package db

import (
	"context"
	"time"
)

const checkSchemaNameExists = `-- name: CheckSchemaNameExists :one
SELECT EXISTS(
    SELECT 1 FROM tenants 
    WHERE schema_name = $1
)
`

func (q *Queries) CheckSchemaNameExists(ctx context.Context, schemaName string) (bool, error) {
	row := q.db.QueryRow(ctx, checkSchemaNameExists, schemaName)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkSubdomainExists = `-- name: CheckSubdomainExists :one
SELECT EXISTS(
    SELECT 1 FROM tenants 
    WHERE subdomain = $1
)
`

func (q *Queries) CheckSubdomainExists(ctx context.Context, subdomain string) (bool, error) {
	row := q.db.QueryRow(ctx, checkSubdomainExists, subdomain)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countTenants = `-- name: CountTenants :one
SELECT COUNT(*) FROM tenants
`

func (q *Queries) CountTenants(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTenants)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (name, subdomain, schema_name)
VALUES ($1, $2, $3)
RETURNING id, name, subdomain, schema_name, created_at
`

type CreateTenantParams struct {
	Name       string `json:"name"`
	Subdomain  string `json:"subdomain"`
	SchemaName string `json:"schema_name"`
}

type CreateTenantRow struct {
	ID         int32     `json:"id"`
	Name       string    `json:"name"`
	Subdomain  string    `json:"subdomain"`
	SchemaName string    `json:"schema_name"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (CreateTenantRow, error) {
	row := q.db.QueryRow(ctx, createTenant, arg.Name, arg.Subdomain, arg.SchemaName)
	var i CreateTenantRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Subdomain,
		&i.SchemaName,
		&i.CreatedAt,
	)
	return i, err
}

const getRecentTenants = `-- name: GetRecentTenants :many
SELECT id, name, subdomain, schema_name, created_at
FROM tenants
ORDER BY created_at DESC
LIMIT $1
`

type GetRecentTenantsRow struct {
	ID         int32     `json:"id"`
	Name       string    `json:"name"`
	Subdomain  string    `json:"subdomain"`
	SchemaName string    `json:"schema_name"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) GetRecentTenants(ctx context.Context, limit int32) ([]GetRecentTenantsRow, error) {
	rows, err := q.db.Query(ctx, getRecentTenants, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecentTenantsRow{}
	for rows.Next() {
		var i GetRecentTenantsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Subdomain,
			&i.SchemaName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchemaNameBySubdomain = `-- name: GetSchemaNameBySubdomain :one
SELECT schema_name FROM tenants WHERE subdomain = $1
`

func (q *Queries) GetSchemaNameBySubdomain(ctx context.Context, subdomain string) (string, error) {
	row := q.db.QueryRow(ctx, getSchemaNameBySubdomain, subdomain)
	var schema_name string
	err := row.Scan(&schema_name)
	return schema_name, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, name, subdomain, schema_name, created_at, updated_at
FROM tenants
WHERE id = $1
`

func (q *Queries) GetTenantByID(ctx context.Context, id int32) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Subdomain,
		&i.SchemaName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantBySchemaName = `-- name: GetTenantBySchemaName :one
SELECT id, name, subdomain, schema_name, created_at, updated_at
FROM tenants
WHERE schema_name = $1
`

func (q *Queries) GetTenantBySchemaName(ctx context.Context, schemaName string) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantBySchemaName, schemaName)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Subdomain,
		&i.SchemaName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantBySubdomain = `-- name: GetTenantBySubdomain :one
SELECT id, name, subdomain, schema_name, created_at, updated_at
FROM tenants
WHERE subdomain = $1
`

func (q *Queries) GetTenantBySubdomain(ctx context.Context, subdomain string) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantBySubdomain, subdomain)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Subdomain,
		&i.SchemaName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllTenants = `-- name: ListAllTenants :many
SELECT id, name, subdomain, schema_name, created_at
FROM tenants
ORDER BY name
`

type ListAllTenantsRow struct {
	ID         int32     `json:"id"`
	Name       string    `json:"name"`
	Subdomain  string    `json:"subdomain"`
	SchemaName string    `json:"schema_name"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) ListAllTenants(ctx context.Context) ([]ListAllTenantsRow, error) {
	rows, err := q.db.Query(ctx, listAllTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllTenantsRow{}
	for rows.Next() {
		var i ListAllTenantsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Subdomain,
			&i.SchemaName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenantName = `-- name: UpdateTenantName :exec
UPDATE tenants
SET name = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateTenantNameParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTenantName(ctx context.Context, arg UpdateTenantNameParams) error {
	_, err := q.db.Exec(ctx, updateTenantName, arg.ID, arg.Name)
	return err
}
