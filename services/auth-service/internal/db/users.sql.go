// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS(
    SELECT 1 FROM users 
    WHERE email = $1 AND deleted_at IS NULL
)
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, first_name, last_name, role, created_by)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, first_name, last_name, role, active, email_verified, created_at
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	Role         string `json:"role"`
	CreatedBy    *int32 `json:"created_by"`
}

type CreateUserRow struct {
	ID            int32     `json:"id"`
	Email         string    `json:"email"`
	FirstName     string    `json:"first_name"`
	LastName      string    `json:"last_name"`
	Role          string    `json:"role"`
	Active        *bool     `json:"active"`
	EmailVerified *bool     `json:"email_verified"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.Role,
		arg.CreatedBy,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.Active,
		&i.EmailVerified,
		&i.CreatedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users
SET active = false, updated_at = CURRENT_TIMESTAMP, updated_by = $2
WHERE id = $1 AND deleted_at IS NULL
`

type DeactivateUserParams struct {
	ID        int32  `json:"id"`
	UpdatedBy *int32 `json:"updated_by"`
}

func (q *Queries) DeactivateUser(ctx context.Context, arg DeactivateUserParams) error {
	_, err := q.db.Exec(ctx, deactivateUser, arg.ID, arg.UpdatedBy)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, first_name, last_name, role, permissions, 
       active, email_verified, last_login, created_at, updated_at
FROM users
WHERE email = $1 AND active = true AND deleted_at IS NULL
`

type GetUserByEmailRow struct {
	ID            int32           `json:"id"`
	Email         string          `json:"email"`
	PasswordHash  string          `json:"password_hash"`
	FirstName     string          `json:"first_name"`
	LastName      string          `json:"last_name"`
	Role          string          `json:"role"`
	Permissions   json.RawMessage `json:"permissions"`
	Active        *bool           `json:"active"`
	EmailVerified *bool           `json:"email_verified"`
	LastLogin     sql.NullTime    `json:"last_login"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.Permissions,
		&i.Active,
		&i.EmailVerified,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, first_name, last_name, role, permissions, 
       active, email_verified, last_login, created_at, updated_at
FROM users
WHERE id = $1 AND deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID            int32           `json:"id"`
	Email         string          `json:"email"`
	FirstName     string          `json:"first_name"`
	LastName      string          `json:"last_name"`
	Role          string          `json:"role"`
	Permissions   json.RawMessage `json:"permissions"`
	Active        *bool           `json:"active"`
	EmailVerified *bool           `json:"email_verified"`
	LastLogin     sql.NullTime    `json:"last_login"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.Permissions,
		&i.Active,
		&i.EmailVerified,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserForAuth = `-- name: GetUserForAuth :one
SELECT id, password_hash, role, active, email_verified
FROM users 
WHERE email = $1 AND active = true AND deleted_at IS NULL
`

type GetUserForAuthRow struct {
	ID            int32  `json:"id"`
	PasswordHash  string `json:"password_hash"`
	Role          string `json:"role"`
	Active        *bool  `json:"active"`
	EmailVerified *bool  `json:"email_verified"`
}

func (q *Queries) GetUserForAuth(ctx context.Context, email string) (GetUserForAuthRow, error) {
	row := q.db.QueryRow(ctx, getUserForAuth, email)
	var i GetUserForAuthRow
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.Role,
		&i.Active,
		&i.EmailVerified,
	)
	return i, err
}

const listActiveUsers = `-- name: ListActiveUsers :many
SELECT id, email, first_name, last_name, role, active, email_verified, 
       last_login, created_at
FROM users
WHERE active = true AND deleted_at IS NULL
ORDER BY first_name, last_name
`

type ListActiveUsersRow struct {
	ID            int32        `json:"id"`
	Email         string       `json:"email"`
	FirstName     string       `json:"first_name"`
	LastName      string       `json:"last_name"`
	Role          string       `json:"role"`
	Active        *bool        `json:"active"`
	EmailVerified *bool        `json:"email_verified"`
	LastLogin     sql.NullTime `json:"last_login"`
	CreatedAt     time.Time    `json:"created_at"`
}

func (q *Queries) ListActiveUsers(ctx context.Context) ([]ListActiveUsersRow, error) {
	rows, err := q.db.Query(ctx, listActiveUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListActiveUsersRow{}
	for rows.Next() {
		var i ListActiveUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.Active,
			&i.EmailVerified,
			&i.LastLogin,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByRole = `-- name: ListUsersByRole :many
SELECT id, email, first_name, last_name, role, active, email_verified,
       last_login, created_at
FROM users
WHERE role = $1 AND active = true AND deleted_at IS NULL
ORDER BY first_name, last_name
`

type ListUsersByRoleRow struct {
	ID            int32        `json:"id"`
	Email         string       `json:"email"`
	FirstName     string       `json:"first_name"`
	LastName      string       `json:"last_name"`
	Role          string       `json:"role"`
	Active        *bool        `json:"active"`
	EmailVerified *bool        `json:"email_verified"`
	LastLogin     sql.NullTime `json:"last_login"`
	CreatedAt     time.Time    `json:"created_at"`
}

func (q *Queries) ListUsersByRole(ctx context.Context, role string) ([]ListUsersByRoleRow, error) {
	rows, err := q.db.Query(ctx, listUsersByRole, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersByRoleRow{}
	for rows.Next() {
		var i ListUsersByRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.Active,
			&i.EmailVerified,
			&i.LastLogin,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET deleted_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP, updated_by = $2
WHERE id = $1
`

type SoftDeleteUserParams struct {
	ID        int32  `json:"id"`
	UpdatedBy *int32 `json:"updated_by"`
}

func (q *Queries) SoftDeleteUser(ctx context.Context, arg SoftDeleteUserParams) error {
	_, err := q.db.Exec(ctx, softDeleteUser, arg.ID, arg.UpdatedBy)
	return err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users 
SET last_login = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2, updated_at = CURRENT_TIMESTAMP, updated_by = $3
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserPasswordParams struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"password_hash"`
	UpdatedBy    *int32 `json:"updated_by"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash, arg.UpdatedBy)
	return err
}

const updateUserPermissions = `-- name: UpdateUserPermissions :exec
UPDATE users
SET permissions = $2, updated_at = CURRENT_TIMESTAMP, updated_by = $3
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserPermissionsParams struct {
	ID          int32           `json:"id"`
	Permissions json.RawMessage `json:"permissions"`
	UpdatedBy   *int32          `json:"updated_by"`
}

func (q *Queries) UpdateUserPermissions(ctx context.Context, arg UpdateUserPermissionsParams) error {
	_, err := q.db.Exec(ctx, updateUserPermissions, arg.ID, arg.Permissions, arg.UpdatedBy)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE users
SET role = $2, updated_at = CURRENT_TIMESTAMP, updated_by = $3
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserRoleParams struct {
	ID        int32  `json:"id"`
	Role      string `json:"role"`
	UpdatedBy *int32 `json:"updated_by"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.Exec(ctx, updateUserRole, arg.ID, arg.Role, arg.UpdatedBy)
	return err
}

const verifyUserEmail = `-- name: VerifyUserEmail :exec
UPDATE users
SET email_verified = true, updated_at = CURRENT_TIMESTAMP, updated_by = $2
WHERE id = $1
`

type VerifyUserEmailParams struct {
	ID        int32  `json:"id"`
	UpdatedBy *int32 `json:"updated_by"`
}

func (q *Queries) VerifyUserEmail(ctx context.Context, arg VerifyUserEmailParams) error {
	_, err := q.db.Exec(ctx, verifyUserEmail, arg.ID, arg.UpdatedBy)
	return err
}
