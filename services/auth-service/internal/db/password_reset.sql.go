// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: password_reset.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const cleanupExpiredTokens = `-- name: CleanupExpiredTokens :exec
DELETE FROM password_reset_tokens
WHERE expires_at < CURRENT_TIMESTAMP OR used_at IS NOT NULL
`

func (q *Queries) CleanupExpiredTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanupExpiredTokens)
	return err
}

const createPasswordResetToken = `-- name: CreatePasswordResetToken :one
INSERT INTO password_reset_tokens (user_id, token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, token, expires_at, created_at
`

type CreatePasswordResetTokenParams struct {
	UserID    *int32    `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

type CreatePasswordResetTokenRow struct {
	ID        int32     `json:"id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) (CreatePasswordResetTokenRow, error) {
	row := q.db.QueryRow(ctx, createPasswordResetToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i CreatePasswordResetTokenRow
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
SELECT prt.id, prt.user_id, prt.token, prt.expires_at, prt.used_at,
       u.email, u.first_name, u.last_name, u.active
FROM password_reset_tokens prt
JOIN users u ON prt.user_id = u.id
WHERE prt.token = $1 
  AND prt.used_at IS NULL 
  AND prt.expires_at > CURRENT_TIMESTAMP
  AND u.active = true 
  AND u.deleted_at IS NULL
`

type GetPasswordResetTokenRow struct {
	ID        int32        `json:"id"`
	UserID    *int32       `json:"user_id"`
	Token     string       `json:"token"`
	ExpiresAt time.Time    `json:"expires_at"`
	UsedAt    sql.NullTime `json:"used_at"`
	Email     string       `json:"email"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Active    *bool        `json:"active"`
}

func (q *Queries) GetPasswordResetToken(ctx context.Context, token string) (GetPasswordResetTokenRow, error) {
	row := q.db.QueryRow(ctx, getPasswordResetToken, token)
	var i GetPasswordResetTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Active,
	)
	return i, err
}

const getUserPasswordResetTokens = `-- name: GetUserPasswordResetTokens :many
SELECT id, token, expires_at, used_at, created_at
FROM password_reset_tokens
WHERE user_id = $1
ORDER BY created_at DESC
`

type GetUserPasswordResetTokensRow struct {
	ID        int32        `json:"id"`
	Token     string       `json:"token"`
	ExpiresAt time.Time    `json:"expires_at"`
	UsedAt    sql.NullTime `json:"used_at"`
	CreatedAt time.Time    `json:"created_at"`
}

func (q *Queries) GetUserPasswordResetTokens(ctx context.Context, userID *int32) ([]GetUserPasswordResetTokensRow, error) {
	rows, err := q.db.Query(ctx, getUserPasswordResetTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserPasswordResetTokensRow{}
	for rows.Next() {
		var i GetUserPasswordResetTokensRow
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.ExpiresAt,
			&i.UsedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markPasswordResetTokenUsed = `-- name: MarkPasswordResetTokenUsed :exec
UPDATE password_reset_tokens
SET used_at = CURRENT_TIMESTAMP
WHERE token = $1
`

func (q *Queries) MarkPasswordResetTokenUsed(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, markPasswordResetTokenUsed, token)
	return err
}
